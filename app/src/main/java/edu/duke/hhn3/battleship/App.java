/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package edu.duke.hhn3.battleship;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintStream;
import java.io.StringReader;
/**
 * @program: Battleship
 * @description: Class of app
 **/
public class App {
  private Player player1;
  private Player player2;
  /**
   *Constructs the APP
   * @param player1
   * @param player2
   */
  public App(Player player1, Player player2) {
    this.player1 = player1;
    this.player2 = player2;
  }
  /**
   * constructs the app with null players
   */
  public App() {
    this(null, null);
  }
  /**
   * To construct fields in App class
   * @param: Board, {@link BoardTextView}, {@link V2ShipFactory}, {@link BufferedReader} input, {@link PrintStream} output
   * @return:
   */
  public void setupPlayers(Board<Character> b1, Board<Character> b2, BoardTextView v1, BoardTextView v2, V2ShipFactory factory, BufferedReader input, PrintStream out) throws IOException {
    player1 = choosePlayer("A", input, out, b1, v1, factory);
    player2 = choosePlayer("B", input, out, b2, v2, factory);
    
  }
  /** 
   * to do PlacementPhase for two players
   */
  public void doPlacementPhase() throws IOException {
    //player1.doOnePlacement("Destroyer", player1.shipCreationFns.get("Destroyer"));
    player1.doPlacementPhase();
    player2.doPlacementPhase();
  }
  /**
   * Do one attacking phase
   * 
   * @param: enemy's {@link Board}, {@link BoardTextView}
   * @return {@link Boolean} if the player is won
   */
  public void doAttackingPhase(Board<Character> b1, Board<Character> b2, BoardTextView view1, BoardTextView view2) throws IOException {
    while (true){
      player1.playOneTurn(player2.getName(), b2, view2);
      if (b2.isThePlayerLost()) {
        return;
      }
      player2.playOneTurn(player1.getName(), b1, view1);
      if (b1.isThePlayerLost()) {
        
        return;
      }
    }
  }
  /**
   * 
   * @description: to prompt users to input whether to play as human or computer,
   * then construct new {@link Player} object
   */
  public Player choosePlayer(String name, BufferedReader input, PrintStream out, Board<Character> b, BoardTextView view, V2ShipFactory factory) throws IOException, NullPointerException {
    while (true) {
      out.println("Choose player " + name + " to be played by human ('H') or computer ('C')?");
      String choice = input.readLine().toUpperCase();
      
      if (choice.equals("C")){
        StringReader sr = new StringReader("a0v\na1\na1v\na2v\na3v\na4v\na5u\na7u\nc0u\nd2u\na8l");
        return new ComPlayer("Computer " + name, b, new BufferedReader(sr), out, factory);
      }
      if (choice.equals("H"))
        return new TextPlayer(name, b, input, out, factory);
      out.println("Invalid choice!");
    }
  }
  /**
   * to get the name of the first player
   */
  public String getFirstPlayerName() {
    return player1.getName();
  }
  /**
   * to get the name of the second player
   */
  public String getSecondPlayerName() {
    return player2.getName();
  }
  /**
   * @Description: Main function of the app
   * @param: String[]
   * @throw: IOException
   * @return: None
   **/
    public static void main(String[] args) throws IOException {      
      // Create an App with the board, inputReader, and system.out
      Board<Character> b1 = new BattleShipBoard<Character>(10, 20, 'X');
      Board<Character> b2 = new BattleShipBoard<Character>(10, 20, 'X');
      BoardTextView view1 = new BoardTextView(b1);
      BoardTextView view2 = new BoardTextView(b2);
      // Create an InputStream Reader for input
      /**InputStreamReader inputReaderA = new InputStreamReader(System.in);
      //InputStreamReader inputReaderB = new InputStreamReader(System.in);
      BufferedReader inputA = new BufferedReader(inputReaderA);*/
      BufferedReader inputA = new BufferedReader(new InputStreamReader(System.in));
      //BufferedReader inputB = new BufferedReader(inputReaderB);
      V2ShipFactory factory = new V2ShipFactory();
      App app = new App();
      app.setupPlayers(b1, b2, view1, view2, factory, inputA, System.out);

      app.doPlacementPhase();
      // Call doOnePlacement
      app.doAttackingPhase(b1, b2, view1, view2);
      // to see who wins
      if (b2.isThePlayerLost())
        System.out.println("Player " + app.getFirstPlayerName() + " won!");
      else
        System.out.println("Player " + app.getSecondPlayerName() + " won!");
    }
}
